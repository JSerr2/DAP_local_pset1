print(result)
# Return the states as a vector
return(result$state)
}
top_states_by_industry <- function(n, industry, year, data) {
industry_sym <- ensym(industry)
# Filter the data, select relevant columns, sort by industry share, and get top states
result <- data %>%
filter(year == !!year) %>%            # Filter for the given year
select(state, !!industry_sym) %>%     # Select the state and industry columns
arrange(desc(!!industry_sym)) %>%     # Sort by industry share in descending order
slice_head(n = n)                     # Get the top 'n' states
# Print the result (optional)
print(result)
# Return the states as a vector
return(result$state)
}
# Define the function to find top states with the highest industry shares
top_states_by_industry <- function(n, industry, year, data) {
# Convert the 'industry' parameter to a symbol for evaluation
industry_sym <- ensym(industry)
# Filter the data, select relevant columns, sort by industry share, and get top states
result <- data %>%
filter(year == !!year) %>%            # Filter for the given year
select(state, !!industry_sym) %>%     # Select the state and industry columns
arrange(desc(!!industry_sym)) %>%     # Sort by industry share in descending order
slice_head(n = n)                     # Get the top 'n' states
# Print the result (optional)
print(result)
# Return the states as a vector
return(result$state)
}
# Example usage: Find the top 5 states with the largest manufacturing shares in 2000
top_manufacturing_states_2000 <- top_states_by_industry(
n = 5, industry = "Manufacturing", year = 2000, data = final_data
)
# Print the result to verify
print(top_manufacturing_states_2000)
top_states_by_industry <- function(n, industry, year, data){
industry_sym <- ensym(industry)
}
tibble(data)
tibble(data)
# Define the function to find top states with the highest industry shares
top_states_by_industry <- function(n, industry, year, data) {
# Convert the 'industry' parameter to a symbol for evaluation
industry_sym <- ensym(industry)
# Filter the data, select relevant columns, sort by industry share, and get top states
result <- data %>%
filter(year == !!year) %>%            # Filter for the given year
select(state, !!industry_sym) %>%     # Select the state and industry columns
arrange(desc(!!industry_sym)) %>%     # Sort by industry share in descending order
slice_head(n = n)                     # Get the top 'n' states
# Print the result (optional)
print(result)
# Return the states as a vector
return(result$state)
}
# Example usage: Find the top 5 states with the largest manufacturing shares in 2000
top_manufacturing_states_2000 <- top_states_by_industry(
n = 5, industry = "Manufacturing", year = 2000, data = final_data
)
# Define the function to find top states with the highest industry shares
top_states_by_industry <- function(n, industry, year, data) {
# Convert the 'industry' parameter to a symbol for evaluation
industry_sym <- ensym(industry)
# Filter the data, select relevant columns, sort by industry share, and get top states
result <- data %>%
filter(year == !!year) %>%            # Filter for the given year
select(state, !!industry_sym) %>%     # Select the state and industry columns
arrange(desc(!!industry_sym)) %>%     # Sort by industry share in descending order
slice_head(n = n)                     # Get the top 'n' states
# Print the result (optional)
print(result)
# Filter the data, select relevant columns, sort by industry share, and get top states
result <- data %>%
filter(year == !!year) %>%            # Filter for the given year
select(state, !!industry_sym) %>%     # Select the state and industry columns
arrange(desc(!!industry_sym)) %>%     # Sort by industry share in descending order
slice_head(n = n)
print(names(final_data))
str(final_data)
# Function to find top states with the highest industry shares
top_states_by_industry <- function(n, industry, year, data) {
# Ensure the column names are correct
if (!(industry %in% names(data))) {
stop(paste("Error: Industry column", industry, "not found in the data."))
}
# Filter for the given year
filtered_data <- data %>%
filter(as.numeric(year) == year)  # Ensure year is treated as numeric
# Select relevant columns (state and industry)
result <- filtered_data %>%
select(state, all_of(industry)) %>%  # Use all_of() to avoid column name issues
arrange(desc(.data[[industry]])) %>%  # Sort in descending order by industry share
slice_head(n = n)  # Get the top 'n' states
# Print the result (optional)
print(result)
# Return the states as a vector
return(result$state)
}
# Example usage: Find the top 5 states for manufacturing in 2000
top_manufacturing_states_2000 <- top_states_by_industry(
n = 5, industry = "Manufacturing", year = 2000, data = final_data
)
top_states_by_industry <- function(n, industry, year, final_data) {
# Ensure the column names are correct
if (!(industry %in% names(final_data))) {
stop(paste("Error: Industry column", industry, "not found in the data."))
}
# Filter for the given year
filtered_data <- final_data %>%
filter(as.numeric(year) == year)  # Ensure year is treated as numeric
# Select relevant columns (state and industry)
result <- filtered_data %>%
select(state, all_of(industry)) %>%  # Use all_of() to avoid column name issues
arrange(desc(.final_data[[industry]])) %>%  # Sort in descending order by industry share
slice_head(n = n)  # Get the top 'n' states
# Print the result (optional)
print(result)
# Return the states as a vector
return(result$state)
}
# Example usage: Find the top 5 states for manufacturing in 2000
top_manufacturing_states_2000 <- top_states_by_industry(
n = 5, industry = "Manufacturing", year = 2000, final_data = final_data
)
View(final_data)
find_top_states <- function(num_states, industry, year){
industry <- trimws(industry)
filtered_data <- final_data[final_data$year == year, ]
if (!(industry %in% colnames(filtered_data))) {
stop("The specified industry is not found in the data frame.")
}
relevant_data <- filtered_data[, c("state", industry)]
sorted_data <- relevant_data[order(relevant_data[[industry]], decreasing = TRUE ), ]
top_states <- head(sorted_data$state, num_states)
return(top_states)
}
find_top_states(5, "Manufacturing", 2000)
find_top_states(5, "Farm employment", 2000)
# Function
colnames(final_data) <- trimws(colnames(final_data))
find_top_states <- function(num_states, industry, year){
industry <- trimws(industry)
filtered_data <- final_data[final_data$year == year, ]
if (!(industry %in% colnames(filtered_data))) {
stop("The specified industry is not found in the data frame.")
}
relevant_data <- filtered_data[, c("state", industry)]
sorted_data <- relevant_data[order(relevant_data[[industry]], decreasing = TRUE ), ]
top_states <- head(sorted_data$state, num_states)
return(top_states)
}
find_top_states(5, "Farm employment", 2000)
View(top_states_by_industry)
find_top_states(5, "Manufacturing", 2000)
top_5_manufacturing <- find_top_states(5, "Manufacturing", 2000)
manufacturing_data <- final_Data %>%
filter(state %in% top_5_manufacturing, year %in% c(2000, 2017)) %>%
select(state, year, Manufacturing)
manufacturing_data <- final_data %>%
filter(state %in% top_5_manufacturing, year %in% c(2000, 2017)) %>%
select(state, year, Manufacturing)
View(manufacturing_data)
ggplot(manufacturing_data,
aes(x = year, y = Manufacturing, color = state)) +
geom_line() +
geom_point() +
labs(title = "Manufacturing Employment Share (2000 vs 2017)",
x = "Year", y = "Manufacturing Share") +
theme_minimal()
industries <- c("Manufacturing", "Farm employment", "Information")
num_states <- c(5, 10, 15)
years <- c(2000, 2000, 2017)
for (i in seq_along(industries)) {
top_states <- find_top_states(num_states[i], industries[i], years[i])
industry_data <- final_data %>%
filter(state %in% top_states, year %in% c(2000, 2017)) %>%
select(state, year, all_of(industries[i]))
plot <- ggplot(industry_data, aes(x = year, y = .data[[industries[i]]], color = state)) +
geom_line() +
geom_point() +
labs(title = paste(industries[i], "Employment Share (2000 vs 2017)"),
x = "Year", y = paste(industries[i], "Share")) +
theme_minimal()
print(plot)
}
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
data_2000 <- final_data %>% filter(year == 2000) %>% select(state, industry)
data_2017 <- final_data %>% filter(year == 2017) %>% select(state, industry)
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(industry)
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(industry)
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("Alabama", "Manufacturing")
plot_state_in_distribution("Michigan", "Manufacturing")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("Illinois", "Farm Employment")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("California", "Farm employment")
plot_state_in_distribution("Alabama", "Manufacturing")
plot_state_in_distribution("California", "Manufacturing")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("Illinois", "Farm_employment")
plot_state_in_distribution("Illinois", "Farmemployment")
plot_state_in_distribution("Illinois", "Retail trade")
industry <- trimws(industry)
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
data_2000 <- final_data %>% filter(year == 2000) %>% select(state, industry)
data_2017 <- final_data %>% filter(year == 2017) %>% select(state, industry)
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(industry)
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(industry)
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("Illinois", "Retail trade")
plot_state_in_distribution("Illinois", "Manufacturing")
plot_state_in_distribution("Illinois", "Information")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
industry_col <- paste0("`", industry, "`")
data_2000 <- final_data %>% filter(year == 2000) %>% select(state, industry)
data_2017 <- final_data %>% filter(year == 2017) %>% select(state, industry)
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(industry)
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(industry)
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
industry_col <- paste0("`", industry, "`")
data_2000 <- final_data %>% filter(year == 2000) %>% select(state, industry)
data_2017 <- final_data %>% filter(year == 2017) %>% select(state, industry)
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(industry)
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(industry)
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
industry_col <- paste0("`", industry, "`")
data_2000 <- final_data %>% filter(year == 2000) %>% select(state, !!rlang::sym(industry))
data_2017 <- final_data %>% filter(year == 2017) %>% select(state, !!rlang::sym(industry))
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry_col, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry_col, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("California", "Information")
# Define the function to plot distributions for a given state and industry
plot_state_in_distribution <- function(state, industry) {
# Clean the industry name input
industry <- trimws(industry)
# Ensure the column names with spaces are properly referenced using backticks
industry_col <- paste0("`", industry, "`")
# Filter and ensure the data is numeric
data_2000 <- final_data %>%
filter(year == 2000) %>%
select(state, !!rlang::sym(industry)) %>%
mutate(across(everything(), as.numeric))
data_2017 <- final_data %>%
filter(year == 2017) %>%
select(state, !!rlang::sym(industry)) %>%
mutate(across(everything(), as.numeric))
# Calculate the change in shares from 2000 to 2017
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
# Extract the state's values for each year and the difference
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
# Define a helper function to plot histograms with vertical lines
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
# Generate the histograms
plot_2000 <- plot_histogram(data_2000, industry_col, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry_col, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
# Print the plots
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
# Example usage of the function
plot_state_in_distribution("California", "Information")
# Define the function to plot distributions for a given state and industry
plot_state_in_distribution <- function(state, industry) {
# Clean the industry name input
industry <- trimws(industry)
# Filter data for the given industry and years, ensuring numeric conversion
data_2000 <- final_data %>%
filter(year == 2000) %>%
select(state, !!rlang::sym(industry)) %>%
mutate(across(everything(), as.numeric)) %>%
distinct()
data_2017 <- final_data %>%
filter(year == 2017) %>%
select(state, !!rlang::sym(industry)) %>%
mutate(across(everything(), as.numeric)) %>%
distinct()
# Calculate the change in shares from 2000 to 2017
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
# Extract the state's values for each year and the difference
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
# Ensure values are not empty (fallback to NA if missing)
state_value_2000 <- ifelse(length(state_value_2000) > 0, state_value_2000, NA)
state_value_2017 <- ifelse(length(state_value_2017) > 0, state_value_2017, NA)
state_value_diff <- ifelse(length(state_value_diff) > 0, state_value_diff, NA)
# Define a helper function to plot histograms with vertical lines
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2, hjust = 1.1) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4, hjust = -0.1) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
# Generate the histograms
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
# Print the plots
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
# Example usage of the function
plot_state_in_distribution("California", "Information")
plot_state_in_distribution <- function(state, industry) {
industry <- trimws(industry)
data_2000 <- final_data %>%
filter(year == 2000) %>%
select(state, !!rlang::sym(industry))
data_2017 <- final_data %>%
filter(year == 2017) %>%
select(state, !!rlang::sym(industry))
data_diff <- data_2017 %>%
inner_join(data_2000, by = "state", suffix = c("_2017", "_2000")) %>%
mutate(change = .data[[paste0(industry, "_2017")]] - .data[[paste0(industry, "_2000")]])
state_value_2000 <- data_2000 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_2017 <- data_2017 %>% filter(state == !!state) %>% pull(!!rlang::sym(industry))
state_value_diff <- data_diff %>% filter(state == !!state) %>% pull(change)
plot_histogram <- function(data, x, state_value, title) {
mean_value <- mean(data[[x]], na.rm = TRUE)
ggplot(data, aes_string(x = x)) +
geom_histogram(binwidth = 0.01, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_value), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = state_value), color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mean_value, y = Inf, label = "Mean", color = "red", vjust = 2) +
annotate("text", x = state_value, y = Inf, label = state, color = "blue", vjust = 4) +
labs(title = title, x = "Employment Share", y = "Frequency") +
theme_minimal()
}
plot_2000 <- plot_histogram(data_2000, industry, state_value_2000,
paste(state, "-", industry, "in 2000"))
plot_2017 <- plot_histogram(data_2017, industry, state_value_2017,
paste(state, "-", industry, "in 2017"))
plot_diff <- plot_histogram(data_diff, "change", state_value_diff,
paste(state, "-", industry, "Change from 2000 to 2017"))
print(plot_2000)
print(plot_2017)
print(plot_diff)
}
plot_state_in_distribution("California", "Information")
plot_state_in_distribution("Illinois", "Information")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("Illinois", "Retail trade")
plot_state_in_distribution("California", "Information")
plot_state_in_distribution("Illinois", "Farm employment")
plot_state_in_distribution("California", "Information")
